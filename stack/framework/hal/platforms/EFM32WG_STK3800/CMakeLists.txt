# 
# OSS-7 - An opensource implementation of the DASH7 Alliance Protocol for ultra
# lowpower wireless sensor communication
#
# Copyright 2015 University of Antwerp
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#Check that the correct toolchain for the platform is being used
REQUIRE_TOOLCHAIN(gcc-arm-embedded)

#Define platform specific options
PLATFORM_PARAM(${PLATFORM_PREFIX}_MCU "EFM32WG990F256" STRING "The MCU of the Gecko board")
PLATFORM_PARAM(${PLATFORM_PREFIX}_RADIO "none" STRING "The radio chip connected to the Gecko board")
SET(JLINK_DEVICE ${${PLATFORM_PREFIX}_MCU} CACHE STRING "The device passed to JLinkExe for flashing")

INCLUDE_DIRECTORIES(
  inc
  kits/common/bsp
)

# CONSOLE
# uses UART0, location 1
PLATFORM_PARAM(${PLATFORM_PREFIX}_CONSOLE_UART     "0"      STRING "The UART channel used by the console UART configuration."   )
PLATFORM_PARAM(${PLATFORM_PREFIX}_CONSOLE_LOCATION "1"      STRING "The route location used by the console UART configuration." )
PLATFORM_PARAM(${PLATFORM_PREFIX}_CONSOLE_BAUDRATE "115200" STRING "The baudrate used by the second console configuration."       )

PLATFORM_OPTION(${PLATFORM_PREFIX}_DEBUGPINS "Enable/Disable Hardware Debug Pins support (see 'hwdebug.h')" TRUE)
PLATFORM_OPTION(PLATFORM_USE_USB_CDC "Enable/Disable the use of CDC (UART Communication using USB" FALSE)
#Restrict the number of possible options for the radio option in the usual manner...
SET_PROPERTY(CACHE ${PLATFORM_PREFIX}_RADIO PROPERTY STRINGS "cc1101;none")

#Add a 'global' definition for the specific MCU
EXPORT_GLOBAL_COMPILE_DEFINITIONS("-D${${PLATFORM_PREFIX}_MCU}")

#Make the 'inc' directory available so 'platform.h' can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(
  inc
  kits/common/bsp
)

##testing...
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(config)

#Make the 'binary platform dir' available so the 'platform_defs.h' file
#(Generated by PLATFORM_BUILD_SETTINGS_FILE) can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#Set platform specific compile options
INSERT_C_FLAGS(AFTER "-gdwarf-2" "-mcpu=cortex-m3" "-mthumb" "-fmessage-length=0" "-mno-sched-prolog" "-fno-builtin" "-ffunction-sections" "-fdata-sections")

#Add platform specific linker flags
INSERT_LINKER_FLAGS(BEFORE OBJECTS INSERT "--specs=nano.specs" "-Wl,-gc-sections")
INSERT_LINKER_FLAGS(BEFORE LINK_LIBRARIES INSERT "-Wl,--start-group")
INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES INSERT "-lgcc -lc -lnosys -Wl,--end-group")

# Add additional definitions to the 'platform_defs.h' file generated by cmake
PLATFORM_HEADER_DEFINE(
  NUMBER ${PLATFORM_PREFIX}_CONSOLE_UART
         ${PLATFORM_PREFIX}_CONSOLE_LOCATION
         ${PLATFORM_PREFIX}_CONSOLE_BAUDRATE
  BOOL   ${PLATFORM_PREFIX}_DEBUGPINS
         PLATFORM_USE_USB_CDC
)

#Define the 'platform library'. Every platform must define a 'PLATFORM' object library
ADD_LIBRARY(PLATFORM OBJECT
    stk3800_main.c
    stk3800_leds.c
    stk3800_userbutton.c
    stk3800_sensors.c
    stk3800_debug.c
    stk3800_lcd.c
    stk3800_usb_descriptors.c
    stk3800_usb.c
    libc_overrides.c
    inc/userbutton.h
    inc/platform_sensors.h
    kits/common/bsp/bsp_bcc.c
    kits/common/bsp/bsp_stk.c
    kits/common/bsp/bsp_trace.c
)

#Include the sources for the efm32wg chip
ADD_CHIP("efm32wg")

#Include the sources for the radio chip, if needed
IF(NOT ("${${PLATFORM_PREFIX}_RADIO}" STREQUAL "none"))
    ADD_CHIP(${${PLATFORM_PREFIX}_RADIO})
ENDIF()

#Build the 'platform_defs.h' settings file
PLATFORM_BUILD_SETTINGS_FILE()
